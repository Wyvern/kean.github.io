---
layout: post
title:  "Yalta: Micro Auto Layout DSL"
date:   2017-11-09 10:00:00 +0300
category: programming
tags: ios
permalink: /post/yalta
uuid: 00e90200-1ef8-479e-aea7-62b98a148c2e
---


[Yalta](https://github.com/kean/Yalta) is a new micro Auto Layout DSL that strives to achieve the perfect balance between power and simplicity.

If you'd like to learn about *why it exists*, *who is it for*, and why it might be the best tool for you, please continue. The best place to start using it is in a Playground [available in the project](https://github.com/kean/Yalta). It's going to feel instantly familiar!

<a href="{{ site.url }}/playgrounds/codable.playground.zip"><img src="{{ site.url }}/images/posts/yalta.png" class="screenshot"></a>


# ⛵️ Yalta

[Yalta](https://github.com/kean/Yalta) is a paragmatic micro Auto Layout DSL - simple and powerful. It's a single file with under 250 lines of code. You can just copy it into your app and use it without having to manually import it in your files.

Yalta combines the idea behind Apple's [layout anchors](https://developer.apple.com/documentation/uikit/nslayoutanchor) with expressive power of [PureLayout](https://github.com/PureLayout/PureLayout). It's instantly familiar. Yalta APIs are designed for clarity, consistency, and discoverability.

> [Yalta](https://en.wikipedia.org/wiki/Yalta) is a beautiful port city on the Black Sea, and a great name for *yet another layout tool* with *anchors*.


# Why

The primary motivation for releasing Yalta was [Chris Eidhof's article](http://chris.eidhof.nl/post/micro-autolayout-dsl/) in which he shares his concerns about the current state of Auto Layout tools in Swift. When I was deciding how to work with Auto Layout in my recent Swift project I came to the same conclusions as Chris did. Among the tools that I've investigated were:

- [PureLayout](https://github.com/PureLayout/PureLayout) which I used in my Objective-C projects before. It was a great library in Objective-C world, but even then it wasn't the one with the most concise syntax. In Swift it became even more apparent.
- [Carthography](https://github.com/robb/Cartography), [SnapKit](https://github.com/SnapKit/SnapKit). Both are pretty large and complex libraries. Operator overloads come with a good chance of [increasing the app's compile time](https://github.com/robb/Cartography/issues/215).
- Apple's [NSLayoutAnchor](https://developer.apple.com/library/ios/documentation/AppKit/Reference/NSLayoutAnchor_ClassReference/index.html) API was created in Objective-C era. I really like the idea behind anchors, but the actual API is verbose, requires manually activating each constraint, and there is no API for creating multiple constraints at once. I also dislike the fact that the API isn't very consistent, and puts too much emphasis on layout `relations` which I rarely use in practice.
- A few other less popular well known libraries. Some were really good, but they were not making the same compromises that I wanted to make.

So rather then pulling in a library I decided to write my own. The goal was to hit a balance between power and simplicity. I felt like I had a pretty good chance of achieving that. After all, I already had plenty of experience working with Auto Layout. The first time we adopted it in our projects was back in iOS 6 days. More recently I made [Arranged](https://github.com/kean/Arranged) (UIStackView backport) and wrote about [UIStackView under the hood](https://kean.github.io/post/lets-build-uistackview). I had a good idea about what I wanted from this tool.


# Who Is This For

Yalta is for someone who:

- Wants clean, concise and convenient Auto Layout code which is consistent with modern Apple's APIs
- [Doesn't want](http://chris.eidhof.nl/post/micro-autolayout-dsl/) to depend on big, complex libraries, with lots of operator overloads and generics
- Prefers [fast compile times](https://github.com/robb/Cartography/issues/215)
- Likes [NSLayoutAnchor](https://developer.apple.com/library/ios/documentation/AppKit/Reference/NSLayoutAnchor_ClassReference/index.html) but wished it had cleaner API, didn't requires manually activating each constraint, and allowed you to create multiple constraints at the same time
